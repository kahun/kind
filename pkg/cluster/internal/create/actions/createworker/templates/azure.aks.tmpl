---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  clusterNetwork:
    services:
      cidrBlocks: [\"192.168.0.0/16\"]
  controlPlaneRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureManagedControlPlane
    name: "{{ .KeosCluster.Metadata.Name }}"
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureManagedCluster
    name: "{{ .KeosCluster.Metadata.Name }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureManagedCluster
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureManagedControlPlane
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: "{{ .KeosCluster.Metadata.Name }}-identity"
{{- if ne .KeosCluster.Spec.Security.ControlPlaneIdentity "" }}
  identity:
    type: UserAssigned
    userAssignedIdentityResourceID: \"{{ .KeosCluster.Spec.Security.ControlPlaneIdentity }}\"
  {{- if ne .KeosCluster.Spec.Security.NodesIdentity "" }}
  kubeletUserAssignedIdentity: \"{{ .KeosCluster.Spec.Security.NodesIdentity }}\"
  {{- end }}
{{- end }}
  location: "{{ .KeosCluster.Spec.Region }}"
  sku:
    tier: "{{ .KeosCluster.Spec.ControlPlane.Azure.Tier }}"
  resourceGroupName: {{ .KeosCluster.Metadata.Name }}
  nodeResourceGroupName: {{ .KeosCluster.Metadata.Name }}-nodes
  networkPolicy: calico
  sshPublicKey: \"\"
  subscriptionID: "{{ .Credentials.SubscriptionID }}"
  version: "{{ .KeosCluster.Spec.K8SVersion }}"
{{- if and (ne .KeosCluster.Spec.Networks.VPCID "") (ne .KeosCluster.Spec.Networks.VPCCidrBlock "" ) }}
  virtualNetwork:
    name: {{ .KeosCluster.Spec.Networks.VPCID }}
    cidrBlock: {{ .KeosCluster.Spec.Networks.VPCCidrBlock }}
    {{- if ne .KeosCluster.Spec.Networks.ResourceGroup "" }}
    resourceGroup: {{ .KeosCluster.Spec.Networks.ResourceGroup }}
    {{- end }}
  {{- if gt (len .KeosCluster.Spec.Networks.Subnets) 0 }}
    subnet:
    {{- with (index .KeosCluster.Spec.Networks.Subnets 0) }}
      name: {{ .SubnetId }}
      cidrBlock: {{ .CidrBlock }}
    {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: \"true\"
  name: "{{ .KeosCluster.Metadata.Name }}-identity"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  allowedNamespaces: {}
  clientID: "{{ .Credentials.ClientID }}"
  clientSecret:
    name: "cluster-identity-secret"
    namespace: "capz-system"
  tenantID: "{{ .Credentials.TenantID }}"
  type: ServicePrincipal
{{- range $node := .KeosCluster.Spec.WorkerNodes }}
{{- range $index, $n := loop .AZ .ZoneDistribution .Quantity .NodeGroupMaxSize .NodeGroupMinSize }}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: "{{ $node.Name }}-mp-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  clusterName: "{{ $.KeosCluster.Metadata.Name }}"
  replicas: {{ $n.QA }}
  template:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ $.KeosCluster.Metadata.Name }}-worker-node"
    spec:
      bootstrap:
        dataSecretName: \"\"
      clusterName: "{{ $.KeosCluster.Metadata.Name }}"
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureManagedMachinePool
        name: "{{ $node.Name }}-mp-{{ $index }}"
      version: "{{ $.KeosCluster.Spec.K8SVersion }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureManagedMachinePool
metadata:
  name: "{{ $node.Name }}-mp-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  mode: {{- if or (gt (len $node.Taints) 0) ($node.Spot) }} User {{- else }} System {{- end }}
  name: "{{ $node.Name }}mp{{ $index }}"
  sku: "{{ $node.Size }}"
  osDiskSizeGB: {{- if $node.RootVolume.Size }} {{ $node.RootVolume.Size }} {{ else }} 30 {{ end }}
  {{- if $node.RootVolume.Type }}
  osDiskType: {{ $node.RootVolume.Type }}
  {{- end }}
  availabilityZones:
    - \"{{- if $node.AZ -}} {{ $n.AZ }} {{- else -}} {{ inc $index }} {{- end }}\"
  scaleSetPriority: {{- if $node.Spot }} Spot {{- else }} Regular {{- end }}
  {{- if gt $node.NodeGroupMaxSize 0 }}
  scaling:
    minSize: {{ $n.MinSize }}
    maxSize: {{ $n.MaxSize }}
  {{- end }}
  {{- if gt (len $node.Labels) 0 }}
  nodeLabels:
    {{- range $key, $value := $node.Labels }}
    {{ $key }}: \"{{ $value }}\"
    {{- end }}
  {{- end }}
  {{- if gt (len $node.Taints) 0 }}
  taints:
    {{- range $i, $nodeTaint := $node.Taints }}
    {{- $taint := split $nodeTaint "=" }}
    - key: \"{{ index $taint 0 }}\"
      {{- $taintParams := split (index $taint 1) ":" }}
      value: \"{{ index $taintParams 0 }}\"
      effect: \"{{ index $taintParams 1 }}\"
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}
