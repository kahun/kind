---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: [\"{{- if .KeosCluster.Spec.Networks.PodsCidrBlock -}} {{ .KeosCluster.Spec.Networks.PodsCidrBlock }} {{- else -}} 192.168.0.0/16 {{- end }}\"]
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: "{{ .KeosCluster.Metadata.Name }}-control-plane"
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: "{{ .KeosCluster.Metadata.Name }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: "{{ .KeosCluster.Metadata.Name }}-identity"
  location: "{{ .KeosCluster.Spec.Region }}"
  networkSpec:
    vnet:
      name: {{ if ne .KeosCluster.Spec.Networks.VPCID "" }}{{ .KeosCluster.Spec.Networks.VPCID }}{{ else }}{{ .KeosCluster.Metadata.Name }}-vnet{{- end }}
      {{- if ne .KeosCluster.Spec.Networks.ResourceGroup "" }}
      resourceGroup: {{ .KeosCluster.Spec.Networks.ResourceGroup }}
      {{- end }}
    subnets:
  {{- if gt (len .KeosCluster.Spec.Networks.Subnets) 0 }}
    {{- range .KeosCluster.Spec.Networks.Subnets }}
    - name: {{ .SubnetId }}
      role: {{ .Role }}
    {{- end }}
  {{- else }}
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      role: node
  {{- end }}
  resourceGroup: {{ .KeosCluster.Metadata.Name }}
  subscriptionID: {{ .Credentials.SubscriptionID }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: \"true\"
  name: "{{ .KeosCluster.Metadata.Name }}-identity"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  allowedNamespaces: {}
  clientID: "{{ .Credentials.ClientID }}"
  clientSecret:
    name: "cluster-identity-secret"
    namespace: "capz-system"
  tenantID: "{{ .Credentials.TenantID }}"
  type: ServicePrincipal
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}-control-plane"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: \"false\"
          cloud-provider: external
          cluster-name: "{{ .KeosCluster.Metadata.Name }}"
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: \"8589934592\"
    files:
      {{- if .DockerRegistries }}
      - content: |
          version = 2
          imports = [\"/etc/containerd/conf.d/*.toml\"]
          [plugins]
            [plugins.\"io.containerd.grpc.v1.cri\"]
              sandbox_image = \"k8s.gcr.io/pause:3.6\"
            [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]
              runtime_type = \"io.containerd.runc.v2\"
            [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]
              SystemdCgroup = true
            [plugins.\"io.containerd.grpc.v1.cri\".registry]
              [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]
                [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]
                  endpoint = [\"https://registry-1.docker.io\"]
              {{- range $reg := .DockerRegistries }}
              {{- $url := hostname $reg.url }}
              [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{ $url }}\".auth]
                password = \"{{ $reg.pass }}\"
                username = \"{{ $reg.user }}\"
              {{- end }}
        path: /etc/containerd/config.toml
      {{- end }}
      - contentFrom:
          secret:
            key: control-plane-azure.json
            name: "{{ .KeosCluster.Metadata.Name }}-control-plane-azure-json"
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: \"0644\"
    {{- if .KeosCluster.Spec.ControlPlane.ExtraVolumes }}
    diskSetup:
      filesystems:
        {{- range $index, $vol := .KeosCluster.Spec.ControlPlane.ExtraVolumes }}
        - device: /dev/disk/azure/scsi1/lun{{ $index }}
          extraOpts:
            - \"-E\"
            - \"lazy_itable_init=1,lazy_journal_init=1\"
          filesystem: ext4
          label: {{ $vol.Label }}
        {{- end }}
      partitions:
        {{- range $index, $vol := .KeosCluster.Spec.ControlPlane.ExtraVolumes }}
        - device: /dev/disk/azure/scsi1/lun{{ $index }}
          layout: true
          overwrite: false
          tableType: gpt
        {{- end }}
    mounts:
      {{- range $index, $vol := .KeosCluster.Spec.ControlPlane.ExtraVolumes }}
      - - LABEL={{ $vol.Label }}
        - {{ $vol.MountPath }}
      {{- end }}
    {{- end }}
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-provider: external
        name: {{`'{{ ds.meta_data[\"local_hostname\"] }}'`}}
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-provider: external
        name: {{`'{{ ds.meta_data[\"local_hostname\"] }}'`}}
    postKubeadmCommands: []
    preKubeadmCommands: []
  machineTemplate:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ $.KeosCluster.Metadata.Name }}-control-plane-node"
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: {{ .KeosCluster.Metadata.Name }}-control-plane
  replicas: {{- if .KeosCluster.Spec.ControlPlane.HighlyAvailable }} 3 {{- else }} 1 {{- end }}
  version: "{{ .KeosCluster.Spec.K8SVersion }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}-control-plane"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  template:
    spec:
      {{- if .KeosCluster.Spec.ControlPlane.ExtraVolumes }}
      dataDisks:
        {{- range $index, $vol := .KeosCluster.Spec.ControlPlane.ExtraVolumes }}
         - nameSuffix: {{ $vol.Name }}
           {{- if $vol.Type }}
           managedDisk:
             storageAccountType: {{ $vol.Type }}
           {{- end }}
           diskSizeGB: {{ $vol.Size }}
           lun: {{ $index }}
        {{- end }}
      {{- end }}
      {{- if ne .KeosCluster.Spec.ControlPlane.NodeImage "" }}
      image:
        id: {{ .KeosCluster.Spec.ControlPlane.NodeImage }}
      {{- end }}
      {{- if ne .KeosCluster.Spec.Security.ControlPlaneIdentity "" }}
      identity: UserAssigned
      userAssignedIdentities:
        - providerID: \"{{ .KeosCluster.Spec.Security.ControlPlaneIdentity }}\"
      {{- end }}
      osDisk:
        {{- if .KeosCluster.Spec.ControlPlane.RootVolume.Size }}
        diskSizeGB: {{ .KeosCluster.Spec.ControlPlane.RootVolume.Size }}
        {{- end }}
        {{- if .KeosCluster.Spec.ControlPlane.RootVolume.Type }}
        managedDisk:
          storageAccountType: {{ .KeosCluster.Spec.ControlPlane.RootVolume.Type }}
        {{- end }}
        osType: Linux
      vmSize: "{{ .KeosCluster.Spec.ControlPlane.Size }}"
{{- range $node := .KeosCluster.Spec.WorkerNodes }}
{{- range $index, $n := loop .AZ .ZoneDistribution .Quantity .NodeGroupMaxSize .NodeGroupMinSize }}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
{{- if gt $node.NodeGroupMaxSize 0 }}
  annotations:
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '{{ $n.MaxSize }}'
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '{{ $n.MinSize }}'
{{- end }}
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  clusterName: "{{ $.KeosCluster.Metadata.Name }}"
  replicas: {{ $n.QA }}
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ $.KeosCluster.Metadata.Name }}-worker-node"
    spec:
      clusterName: "{{ $.KeosCluster.Metadata.Name }}"
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: "{{ $node.Name }}-md-{{ $index }}"
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: "{{ $node.Name }}-md-{{ $index }}"
      failureDomain: \"{{- if $node.AZ -}} {{ $n.AZ }} {{- else -}} {{ inc $index }} {{- end }}\"
      version: "{{ $.KeosCluster.Spec.K8SVersion }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  template:
    spec:
      {{- if $node.ExtraVolumes }}
      dataDisks:
        {{- range $index, $vol := $node.ExtraVolumes }}
         - nameSuffix: {{ $vol.Name }}
           {{- if $vol.Type }}
           managedDisk:
            storageAccountType: {{ $vol.Type }}
           {{- end }}
           diskSizeGB: {{ $vol.Size }}
           lun: {{ $index }}
        {{- end }}
      {{- end }}
      {{- if ne $node.NodeImage "" }}
      image:
        id: {{ $node.NodeImage }}
      {{- end }}
      {{- if ne $.KeosCluster.Spec.Security.NodesIdentity "" }}
      identity: UserAssigned
      userAssignedIdentities:
        - providerID: \"{{ $.KeosCluster.Spec.Security.NodesIdentity }}\"
      {{- end }}
      osDisk:
        {{- if $node.RootVolume.Size }}
        diskSizeGB: {{ $node.RootVolume.Size }}
        {{- end }}
        {{- if $node.RootVolume.Type }}
        managedDisk:
          storageAccountType: {{ $node.RootVolume.Type }}
        {{- end }}
        osType: Linux
      {{- if $node.Spot }}
      spotVMOptions: {}
      {{- end }}
      vmSize: "{{ $node.Size }}"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  template:
    spec:
      files:
        {{- if $.DockerRegistries }}
        - content: |
            version = 2
            imports = [\"/etc/containerd/conf.d/*.toml\"]
            [plugins]
              [plugins.\"io.containerd.grpc.v1.cri\"]
                sandbox_image = \"k8s.gcr.io/pause:3.6\"
              [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]
                runtime_type = \"io.containerd.runc.v2\"
              [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]
                SystemdCgroup = true
              [plugins.\"io.containerd.grpc.v1.cri\".registry]
                [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]
                  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]
                    endpoint = [\"https://registry-1.docker.io\"]
                {{- range $reg := $.DockerRegistries }}
                {{- $url := hostname $reg.url }}
                [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{ $url }}\".auth]
                  password = \"{{ $reg.pass }}\"
                  username = \"{{ $reg.user }}\"
                {{- end }}
          path: /etc/containerd/config.toml
        {{- end }}
        - contentFrom:
            secret:
              key: worker-node-azure.json
              name: "{{ $node.Name }}-md-{{ $index }}-azure-json"
          owner: root:root
          path: /etc/kubernetes/azure.json
          permissions: \"0644\"
      {{- if $node.ExtraVolumes }}
      diskSetup:
        filesystems:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/disk/azure/scsi1/lun{{ $index }}
            filesystem: ext4
            label: {{ $vol.Label }}
          {{- end }}
        partitions:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/disk/azure/scsi1/lun{{ $index }}
            layout: true
            overwrite: false
            tableType: gpt
          {{- end }}
      mounts:
        {{- range $index, $vol := $node.ExtraVolumes }}
        - - LABEL={{ $vol.Label }}
          - {{ $vol.MountPath }}
        {{- end }}
      {{- end }}
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            azure-container-registry-config: /etc/kubernetes/azure.json
            cloud-provider: external
            {{- if gt (len $node.Labels) 0 }}
            node-labels: \"{{ range $key, $value := $node.Labels }}{{ $key }}={{ $value }},{{- end }}\"
            {{- end }}
            {{- if gt (len $node.Taints) 0 }}
            register-with-taints: \"{{ range $i, $taint := $node.Taints }}{{$taint}}{{- if ne $i (sub (len $node.Taints) 1) }},{{- end }}{{ end }}\"
            {{- end }}
          name: {{`'{{ ds.meta_data[\"local_hostname\"] }}'`}}
      preKubeadmCommands: []
{{- end }}
{{- end }}
